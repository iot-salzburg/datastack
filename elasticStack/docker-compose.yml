version: "3.4"
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.1
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - /mnt/il060-samba-share/il08X/datastack/esbackup:/usr/share/elasticsearch/backup
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#      - ./elasticsearch/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties:ro
    configs:
      - source: esconfig
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: eslog4jconf
        target: /usr/share/elasticsearch/config/log4j2.properties
#    ports:
#      - "9200:9200"
#      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx6g -Xms6g"
    healthcheck:
      test: "exit 0"
      interval: 1m00s
      timeout: 10s
      retries: 3
    networks:
      - datastore
    deploy:
      placement:
        constraints: [node.role == worker]
#      resources:
#        limits:
#          cpus: "1"
#          memory: 10G
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    configs:
      - source: esconfig
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: eslog4jconf
        target: /usr/share/elasticsearch/config/log4j2.properties


  logstash:
    image: docker.elastic.co/logstash/logstash-oss:6.3.1
    configs:
      - source: lsconfig
        target: /usr/share/logstash/config/logstash.yml
      - source: lspipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    networks:
      - datastore
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
      replicas: 2
      placement:
        constraints: [node.role == worker]
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.3.1
    configs:
      - source: kibanaconfig
        target: /usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - datastore
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
      replicas: 1
      placement:
        constraints: [node.role == worker]
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
       condition: on-failure


  grafana:
#    image: grafana/grafana:5.0.4
    image: 127.0.0.1:5001/grafana
    build: grafana/
    ports:
      - 3000:3000
    volumes:
      -  grafanadata:/var/lib/grafana
    networks:
      - datastore
    depends_on:
      - elasticsearch
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      ELASTICSEARCH_ENDPOINT: http://elasticsearch:9200
# commented out because we don't use it via proxy
#      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s/grafana/"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 3G
      replicas: 1
      placement:
        constraints: [node.role == manager]
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
       condition: on-failure


## https://github.com/jupyter/docker-stacks/tree/master/all-spark-notebook
#  jupyter:
#    image: 127.0.0.1:5001/jupyter
#    build: jupyter/
#    ports:
#      - 8888:8888
#    volumes:
#      - /mnt/il060-samba-share/jupyter_notebooks/testing:/home/jovyan/work/testing
##      - jupyterdata:/home/jovyan/work
#    networks:
#      - datastore
#    deploy:
#      placement:
#        constraints: [node.role == worker]
##      resources:
##        limits:
##          cpus: "1"
##          memory: 8G
#      replicas: 1
#      update_config:
#        parallelism: 2
#        delay: 10s
#      restart_policy:
#        condition: on-failure



volumes:
  esdata:
    driver: local
  pipeline:
    driver: local
  grafanadata:
    driver: local
#  jupyterdata:
#    driver: local

networks:
  datastore:

configs:
  esconfig:
    file: elasticsearch/config/elasticsearch.yml
  eslog4jconf:
    file: elasticsearch/config/log4j2.properties
  kibanaconfig:
    file: kibana/config/kibana.yml
  lsconfig:
    file: logstash/config/logstash.yml
  lspipeline:
    file: logstash/pipeline/logstash.conf

